"""
运算符
Python支持多种运算符，下表大致按照优先级从高到低的顺序列出了所有的运算符，
运算符的优先级指的是多个运算符同时出现时，先做什么运算然后再做什么运算。

[] [:]	下标，切片
**	    指数
~ + -	按位取反, 正负号
* / % //	乘，除，模，整除
+ -	加，减
>> <<	右移，左移
&	按位与
^ |	按位异或，按位或
<= < > >=	小于等于，小于，大于，大于等于
== !=	等于，不等于
is is not	身份运算符
in not in	成员运算符
not or and	逻辑运算符
= += -= *= /= %= //= **= &= `	= ^= >>= <<=`
"""
print('---------------------数学运算符-------------------------------')
"""
加法   +
乘法   *
剪发   -
除法   /
整除取整  // 
两个数取余的数 %
幂运算 a**b a的b次方
"""
# 数值运算
print(6 // 4)
# print(6 % 4)
# print(2 ** 2)


print('---------------------比较运算符-------------------------------')
"""
比较运算符
    > 大于
    < 小于
    <= 大于等于
    <= 小于等于
    != 不等于
    == 等于
    true = 1
    false = 0
与或否运算符
    与 and 
    否 not
    或 or
"""
# 数值比较
print(6 < 4)
print(6 >= 4)
print(2 == 2)
print()

print('---------------------in & to-------------------------------')

"""
Python 有一组关键字，这些关键字是保留字，不能用作变量名、函数名或任何其他标识符:

and	逻辑运算符。
as	创建别名。
assert	用于调试。
break	跳出循环。
class	定义类。
continue	继续循环的下一个迭代。
def	定义函数。
del	删除对象。
elif	在条件语句中使用，等同于 else if。
else	用于条件语句。
except	处理异常，发生异常时如何执行。
False	布尔值，比较运算的结果。
finally	处理异常，无论是否存在异常，都将执行一段代码。
for	创建 for 循环。
from	导入模块的特定部分。
global	声明全局变量。
if	写一个条件语句。
import	导入模块。
in	检查列表、元组等集合中是否存在某个值。
is	测试两个变量是否相等。
lambda	创建匿名函数。
None	表示 null 值。
nonlocal	声明非局部变量。
not	逻辑运算符。
or	逻辑运算符。
pass	null 语句，一条什么都不做的语句。
raise	产生异常。
return	退出函数并返回值。
True	布尔值，比较运算的结果。
try	编写 try...except 语句。
while	创建 while 循环。
with	用于简化异常处理。
yield	结束函数，返回生成器。
"""

"""
in & to-是检测对象是否具有该对象的序列成员
1.in - 若序列(字符串/列表/元祖/字典)中存在相应的成员，则返回true，否则返回false
2.not in - 若不存在序列，则返回true
"""
print('我' in '我你他')
print(1 in (1, 2, 3, 4))
print(2 in [1, 2, 4, 6])
print('年龄' in {'年龄' : '18'})

print('i' not in 'i love you')

print('---------------------is & not-------------------------------')

"""
is&not-检测对象是否相同
"""
a1 = '李峋'
a2 = '李峋'
print(a2 is a1)

b1 = (1,2,3,4)
b2 = (1,2,3,4)
print(b1 is b2)

c1 = 1,2,3,4
c2 = 1,2,3,4
print(c1 is c2)

d1 = {'年龄' : '18',
      '性别' : '男'
      }
d2 = {'年龄' : '18',
      '性别' : '男'
      }
print(d1 is d2)

f1 = [1, 2, 3, 4]
f2 = [1, 2, 3, 4]
print(f1 is f2)

g1 = {1,2,3,4}
g2 = {1,2,3,4}
print(g1 is g2)

print('----------------------------------------------------')

"""
赋值运算符和复合赋值运算符
"""
a = 10
b = 3
a += b        # 相当于：a = a + b
a *= a + 2    # 相当于：a = a * (a + 2)
print(a)      # 算一下这里会输出什么